// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package models

import (
	"encoding/json"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// Defines values for Direction.
const (
	East  Direction = "east"
	North Direction = "north"
	South Direction = "south"
	West  Direction = "west"
)

// Defines values for ObjectType.
const (
	ObjectTypeApple      ObjectType = "apple"
	ObjectTypeCorpse     ObjectType = "corpse"
	ObjectTypeMouse      ObjectType = "mouse"
	ObjectTypeSnake      ObjectType = "snake"
	ObjectTypeWall       ObjectType = "wall"
	ObjectTypeWatermelon ObjectType = "watermelon"
)

// Defines values for GetGamesParamsSorting.
const (
	Random GetGamesParamsSorting = "random"
	Smart  GetGamesParamsSorting = "smart"
)

// Apple Object Apple. The type is `apple`
type Apple struct {
	Dot *Dot `json:"dot,omitempty"`

	// Id An object's identifier
	Id   ObjectId   `json:"id"`
	Type ObjectType `json:"type"`
}

// Broadcast Object contains broadcast result flag
type Broadcast struct {
	// Success If the flag is true, broadcasting has succeeded
	Success bool `json:"success"`
}

// Capacity Object contains current server capacity
type Capacity struct {
	// Capacity Capacity is the number of opened connections divided by the number of allowed connections for the server
	Capacity float64 `json:"capacity"`
}

// Corpse Object Corpse. The type is `corpse`
type Corpse struct {
	Dots Dots `json:"dots"`

	// Id An object's identifier
	Id   ObjectId   `json:"id"`
	Type ObjectType `json:"type"`
}

// Deleted Object contains information about the deleted game
type Deleted struct {
	// Id Game identificator
	Id int32 `json:"id"`
}

// Direction defines model for Direction.
type Direction string

// Dot defines model for Dot.
type Dot = []int32

// Dots defines model for Dots.
type Dots = []Dot

// Error Contains an error code and description
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Text description
	Text string `json:"text"`
}

// Game Object contains information about a game
type Game struct {
	// Count Current players number in the game
	Count int32 `json:"count"`

	// Height Map height
	Height int32 `json:"height"`

	// Id Identificator
	Id int32 `json:"id"`

	// Limit Players limit
	Limit int32 `json:"limit"`

	// Rate Rate
	Rate int32 `json:"rate"`

	// Width Map width
	Width int32 `json:"width"`
}

// Games Object contains a list of games on the server
type Games struct {
	// Count Current games number on the server
	Count int32  `json:"count"`
	Games []Game `json:"games"`

	// Limit Games limit
	Limit int32 `json:"limit"`
}

// Info Object contains basic information about the server
type Info struct {
	Author  string `json:"author"`
	Build   string `json:"build"`
	License string `json:"license"`
	Version string `json:"version"`
}

// Map Map properties
type Map struct {
	// Height Map height
	Height int32 `json:"height"`

	// Width Map width
	Width int32 `json:"width"`
}

// Mouse Object Mouse. The type is `mouse`
type Mouse struct {
	Direction Direction `json:"direction"`
	Dot       *Dot      `json:"dot,omitempty"`

	// Id An object's identifier
	Id   ObjectId   `json:"id"`
	Type ObjectType `json:"type"`
}

// ObjectId An object's identifier
type ObjectId = int64

// ObjectType defines model for ObjectType.
type ObjectType string

// Objects Contains all game objects and the map's properties
type Objects struct {
	// Map Map properties
	Map *Map `json:"map,omitempty"`

	// Objects A list of all objects on the map
	Objects []Objects_Objects_Item `json:"objects"`
}

// Objects_Objects_Item defines model for Objects.objects.Item.
type Objects_Objects_Item struct {
	union json.RawMessage
}

// Pong Pong message
type Pong struct {
	Pong int32 `json:"pong"`
}

// Snake Object Snake. The type is `snake`
type Snake struct {
	Dots Dots `json:"dots"`

	// Id An object's identifier
	Id   ObjectId   `json:"id"`
	Type ObjectType `json:"type"`
}

// Wall Object Wall. The type is `wall`
type Wall struct {
	Dots Dots `json:"dots"`

	// Id An object's identifier
	Id   ObjectId   `json:"id"`
	Type ObjectType `json:"type"`
}

// Watermelon Object Watermelon. The type is `watermelon`
type Watermelon struct {
	Dots Dots `json:"dots"`

	// Id An object's identifier
	Id   ObjectId   `json:"id"`
	Type ObjectType `json:"type"`
}

// GameID defines model for GameID.
type GameID = int32

// GameNotFound Contains an error code and description
type GameNotFound = Error

// InvalidParameters Contains an error code and description
type InvalidParameters = Error

// ServerError Contains an error code and description
type ServerError = Error

// GetGamesParams defines parameters for GetGames.
type GetGamesParams struct {
	// Limit Games limit in the server's response
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Sorting Games sorting rule
	Sorting *GetGamesParamsSorting `form:"sorting,omitempty" json:"sorting,omitempty"`
}

// GetGamesParamsSorting defines parameters for GetGames.
type GetGamesParamsSorting string

// PostGamesFormdataBody defines parameters for PostGames.
type PostGamesFormdataBody struct {
	// EnableWalls This boolean parameter indicates whether to add walls to the new game or not to
	EnableWalls *bool `form:"enable_walls,omitempty" json:"enable_walls,omitempty"`

	// Height Map height
	Height int32 `form:"height" json:"height"`

	// Limit Players limit for the new game
	Limit int32 `form:"limit" json:"limit"`

	// Width Map width
	Width int32 `form:"width" json:"width"`
}

// PostGamesIdBroadcastFormdataBody defines parameters for PostGamesIdBroadcast.
type PostGamesIdBroadcastFormdataBody struct {
	// Message Message to be broadcasted for players in a selected game
	Message string `form:"message" json:"message"`
}

// PostGamesFormdataRequestBody defines body for PostGames for application/x-www-form-urlencoded ContentType.
type PostGamesFormdataRequestBody PostGamesFormdataBody

// PostGamesIdBroadcastFormdataRequestBody defines body for PostGamesIdBroadcast for application/x-www-form-urlencoded ContentType.
type PostGamesIdBroadcastFormdataRequestBody PostGamesIdBroadcastFormdataBody

// AsSnake returns the union data inside the Objects_Objects_Item as a Snake
func (t Objects_Objects_Item) AsSnake() (Snake, error) {
	var body Snake
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSnake overwrites any union data inside the Objects_Objects_Item as the provided Snake
func (t *Objects_Objects_Item) FromSnake(v Snake) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSnake performs a merge with any union data inside the Objects_Objects_Item, using the provided Snake
func (t *Objects_Objects_Item) MergeSnake(v Snake) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsApple returns the union data inside the Objects_Objects_Item as a Apple
func (t Objects_Objects_Item) AsApple() (Apple, error) {
	var body Apple
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApple overwrites any union data inside the Objects_Objects_Item as the provided Apple
func (t *Objects_Objects_Item) FromApple(v Apple) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApple performs a merge with any union data inside the Objects_Objects_Item, using the provided Apple
func (t *Objects_Objects_Item) MergeApple(v Apple) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsCorpse returns the union data inside the Objects_Objects_Item as a Corpse
func (t Objects_Objects_Item) AsCorpse() (Corpse, error) {
	var body Corpse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCorpse overwrites any union data inside the Objects_Objects_Item as the provided Corpse
func (t *Objects_Objects_Item) FromCorpse(v Corpse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCorpse performs a merge with any union data inside the Objects_Objects_Item, using the provided Corpse
func (t *Objects_Objects_Item) MergeCorpse(v Corpse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsMouse returns the union data inside the Objects_Objects_Item as a Mouse
func (t Objects_Objects_Item) AsMouse() (Mouse, error) {
	var body Mouse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMouse overwrites any union data inside the Objects_Objects_Item as the provided Mouse
func (t *Objects_Objects_Item) FromMouse(v Mouse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMouse performs a merge with any union data inside the Objects_Objects_Item, using the provided Mouse
func (t *Objects_Objects_Item) MergeMouse(v Mouse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsWatermelon returns the union data inside the Objects_Objects_Item as a Watermelon
func (t Objects_Objects_Item) AsWatermelon() (Watermelon, error) {
	var body Watermelon
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWatermelon overwrites any union data inside the Objects_Objects_Item as the provided Watermelon
func (t *Objects_Objects_Item) FromWatermelon(v Watermelon) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWatermelon performs a merge with any union data inside the Objects_Objects_Item, using the provided Watermelon
func (t *Objects_Objects_Item) MergeWatermelon(v Watermelon) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsWall returns the union data inside the Objects_Objects_Item as a Wall
func (t Objects_Objects_Item) AsWall() (Wall, error) {
	var body Wall
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWall overwrites any union data inside the Objects_Objects_Item as the provided Wall
func (t *Objects_Objects_Item) FromWall(v Wall) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWall performs a merge with any union data inside the Objects_Objects_Item, using the provided Wall
func (t *Objects_Objects_Item) MergeWall(v Wall) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t Objects_Objects_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Objects_Objects_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
